ActivitySelection
	1) Greedy - sort by end time, then select first based on the current time.
	2) Either recursive or a loop.

AddTowNumbers
	1) just travese both linked list. caculate digit sum and carry. 
	2) need to deal with case that two list are not same in length
	3) be sure to continue look even if both pointers are null but carry is 1

AlternateArrayItems
	1) Use extra arrays;
	2) Swap inner half, then recursive all each half. Special handling for odd numbers (2n, whwre n is odd)

AlternateLists
	1) recursive;
	2) non recursive - be careful the case when list1 hit end but list2 is still valid

ArrayIsSubSequenceOfAnother:
	1) Hasing 
	2) use BinarySearch if not allowed for extra space 
BinarySearch
	1) Trivial

BinarySearchTree:
	1) Check valid BSF: a) use min-max range check recurisively; b) In-order traverse, previous must be less than current

BirdAndMaxFruitGathering
	1) most efficient solution just use the "moving window" on the original array. Use modulo operator for "over flow" items scenario

BottomViewOfBinaryTree
	1) better use BFS, queued items carry Node and its distance to root. With BFS there is no need to track depth.

BuildFromSortedArray:
	1) Start from mid, then recurisvely build left and right

BuildTreeFromInOrderAndPreOrderTraverse
	1) use List is a lot simpler

CanPlaceFlower
	1) Check for consecutive 0s, be carefull with the edge cases (start/end)

CheckBinaryTreeSubTreeOfAnother
	1) The solution to combine and compare in-order and pre-order sequence doesn't work in some scenarios. need special handlings for leaves;
	2) it should work using post-order to build "token" for nodes, then do a substring match.

CircularTour:
	1) use two queues. There can be tricky to detect the exit condition of loop.
	2) can caculuate "diff" sum at begining, if negative, there is no solution

CombinationSum:
	1) needs to prepare data set - duplicate those numbers that can be used for sum
	2) either dynamic programming, or just loop and recursive calls. tricky to remove duplicates

ConnectNodesAtSameLevel
	1) BFS - it's relatively straightforward to pass level info along with nodes, then track "lastvisited" to decide if last's NextRight should point to current.
	2) it's more elegant but tricky to use "null" to separate levels in the queue. Use Peek()! and enque new null when null is dequed and queue not empty. 

ConvertBinaryTreeToDoublyLinkedList
	1) In order traverse and returns both head and tail of the sub tree. use head/tail from left and right childern to setup points accordingly.

CountAllNegativeNumbersInSorted2DArray
	1) start from top-right or bottom-left, count sum based on index it hits

CountThePath
	1) can start from either the top left (entry) or bottom right (exit)
	2) memo seems working for both, but number of memo hit is different
	3) bottom right solution looks more clear

EditDistance
	1) DP, memo works.
	2) pass scanning char index is better than pass substings.

EquilibriumPoint
	1) add up sum from left and right in same loop. check left sum and right sum equals or not, be careful with [1,1] scenario.

Fibonacci
	1) Recurisve + memo,  or bottom-up DP (use a dictionary). 
	2) simple loop is most cost effective

FindDuplicateSubTrees
	1) use post order travere to build "string token" for nodes. The match the tokens for duplicate sub trees.

FindElementAppearsOnceInSortedArray
	1) XOR - simple but just a trick, and O(n)
	2) Scan - simple, O(n)
	3) Binary search. Be careful with then even/odd lengh of divided sub arrays.

FindFirstSetBit
	1) number modulu 2 - if 1, the bit is one. So modulu results 0, divide the number by 2 and repeat (count the loop).

FindInSorted2DArray
	1) Start search from either top-right or bottom-left, compare values and move to coresponcing directions.

FindLowestCommonAncestor
	1) best way is to seach both and return stacks.then pop each stacks together until see differences.

FindMaxSubArray
	1) Divide & conquer is do-able and a n*lgn solution (T(n) = 2 * T(n/2) + f(n)).
	2) O(n) solution - scan from left to right, remember last sum/indexes seen. when hit a negative local sum, reset local sum and pointers.
	   It seems working but not sure if it can cover all the scenarios.

PathSum1
	1) recursive...

PathSum2
	2) recusive, each time returns a stack instead of a boolean. In case it asks for all the paths, return a list of stacks and don't stop right side call if left side returns.
ReverseInteger
	1) can use a stack to store reversed digits; can without stack, code is a little tricky
	3) need to deal with overflow

ParenthesisChecker
	1) Stack, of course
NextLargerElement
	1) O(N square) is simple;
	2) So called O(N), use a stack to store items (value and index) of desending sequence, once it
	   hits a greater one, all smaller items are poped, their coresponding location in result array
	   are updated with the greater value. 
EquilibriumPoint
	1) sum up from both directions, increase smaller, until left index greater than right. if both sums are same and l == h, return l.

SpecialKeyboard:
	1) Dynamic programming - can use memorization, speical case optimization
SolveSudoku
	1) No need to start loops for solving, only need loops to find next 0 in the matrix - if not found, it's solved.

StackWithMin
	1) a straight forward solution is to use an extra stack;
	2) use the math method. be careful the actual value to return in Pop method, when popped value is less than current min.

SubArrayWithGivenSum
	1) build up a dictionary with the "current sum" as key, then iterate through the arry, accumulate a sum,
	  and look up "currentSum + targetSum" in the dictionary
	2) be careful with the starting index.

SwappingPairMakeSumEqual:
	1) there should be no solution if the sum difference is an odd number;
	2) one solution is to sort both array, and start moving two points from left to right for matching.
TwoSum:
	1) can either build a map then iterate through to find match, or iterate and build map in same look, the later should be better.
WordBreak
	1) dynamic programming, but memo not useful
ZigZagConversion:
	1) Can use a data structure to form the shape
	2) Can do directly based on index, special logic for the middle row when the level is an even number